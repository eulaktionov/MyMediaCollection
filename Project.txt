v01 Blank Window - просто пустое окно
v02 Simple List View 
	создаем перечисления Enums
	создаем классы модели Model
	в главном окне создаем список данных
	в скрипте создаем заголовок и пустой ListView
	по загрузке ListView связываем со списком
	добавляем шаблон ListView
v03 List Header and Filter
	добавляем шаблон заголовка
	добавляем comboBox для выбора типа носителя
	добавляем загрузку comboBox
		список носителей
		событие загрузки
	событие изменение выборки
v04 Button and Dialog
	добавляем кнопку
	по клику вызываем диалог
v05 ViewModel1
	создаем базовый класс ViewModel
	создаем MaidViewModel
		_mediums
		_selectedMedium
		_items
		PopulateData
		public Mediums (SetProperty)
		public SelectedMedium (SetProperty)
	добавляем static ViewModel в App.cs
	добавляем свойство ViewModel в MainWindow
	добавляем источники в ComboBox
	убираем списки (все) из MainWindow
v06 ViewModel2
	добавляем Items в ViewModel
	добавляем источник в ListView
	обрабатываем выбор Combo (фильтруем) 
		по свойству SelectedItem
v07 ViewModel3
	создаем базовую команду RelayCommand
	добавляем во ViewModel DeleteCommand и AddEditCommand: конструктор, 
		DeleteItem, CanDeleteItem, AddOrEditItem
	реализуем SelectedItem
	добавляем SelectedItem в ListView
	реализуем кнопки Add Item, Delete Item
	!!! непонятно, как работает
	 public void RaiseCanExecuteChanged() 
            => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
v08 ViewModel4 
	устанавливаем CommunityToolkit.Mvvm
	меняем Mediums, Items на атрибуты
	выносим код из SelectedMedium в OnSelectMediumChanged
	удаляем свойства (Mediums, SelectedMedium, Items, SelectedItem)
	изменяем Delete и  AddEdit команды
	коротко
		атрибутами отмечаем публикуемые свойства
		(причем подчеркивание работает...)
		добавляем дополнительные действия через On...Changed
		создаем обработчики команд

